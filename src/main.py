import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

books = [
    {
        "id": 1,
        "name": "Python",
        "author": "Mathey"
    },
    {
        "id": 2,
        "name": "Java",
        "author": "John"
    }
]


@app.get("/books",
         tags=["–ö–Ω–∏–≥–∏ üìö"],
         summary="–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"
         )
def get_books():
    return books


@app.get("/books/{book_id}",
         tags=["–ö–Ω–∏–≥–∏ üìö"],
         summary="GET-–†—É—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏"
         )
def get_book(book_id: int):
    for book in books:
        if book["id"] == book_id:
            return book
    raise HTTPException(status_code=404, detail="Book not found")


class NewBook(BaseModel):
    name: str
    author: str


@app.post("/books",
          tags=["–ö–Ω–∏–≥–∏ üìö"],
          summary="POST-–†—É—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"
          )
def add_book(book: NewBook):
    books.append({
        "id": len(books) + 1,  # –ü—Ä–∏–º–µ—Ä –±–µ–∑ –ë–î
        "name": book.name,
        "author": book.author
    })
    return {
        "success": True,
        "message": "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
    }  # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≤—Å–µ OK


if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=8000, reload=True)
